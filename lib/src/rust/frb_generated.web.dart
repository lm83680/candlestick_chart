// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/calculator.dart';
import 'api/models.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Map<PlatformInt64, BigInt> dco_decode_Map_i_64_usize_None(dynamic raw);

  @protected
  Set<PlatformInt64> dco_decode_Set_i_64_None(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Candlestick dco_decode_box_autoadd_candlestick(dynamic raw);

  @protected
  CrosshairPrintInfo dco_decode_box_autoadd_crosshair_print_info(dynamic raw);

  @protected
  HighPrintInfo dco_decode_box_autoadd_high_print_info(dynamic raw);

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw);

  @protected
  LivePricePrintInfo dco_decode_box_autoadd_live_price_print_info(dynamic raw);

  @protected
  LowPrintInfo dco_decode_box_autoadd_low_print_info(dynamic raw);

  @protected
  PriceCalculator dco_decode_box_autoadd_price_calculator(dynamic raw);

  @protected
  (double, double) dco_decode_box_autoadd_record_f_64_f_64(dynamic raw);

  @protected
  Candlestick dco_decode_candlestick(dynamic raw);

  @protected
  CandlestickPrintInfo dco_decode_candlestick_print_info(dynamic raw);

  @protected
  CrosshairPrintInfo dco_decode_crosshair_print_info(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  GridPricePrintInfo dco_decode_grid_price_print_info(dynamic raw);

  @protected
  GridTimePrintInfo dco_decode_grid_time_print_info(dynamic raw);

  @protected
  HighPrintInfo dco_decode_high_print_info(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  int dco_decode_i_8(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<Candlestick> dco_decode_list_candlestick(dynamic raw);

  @protected
  List<CandlestickPrintInfo> dco_decode_list_candlestick_print_info(
      dynamic raw);

  @protected
  List<GridPricePrintInfo> dco_decode_list_grid_price_print_info(dynamic raw);

  @protected
  List<GridTimePrintInfo> dco_decode_list_grid_time_print_info(dynamic raw);

  @protected
  List<List<String>> dco_decode_list_list_String(dynamic raw);

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(PlatformInt64, BigInt)> dco_decode_list_record_i_64_usize(dynamic raw);

  @protected
  LivePricePrintInfo dco_decode_live_price_print_info(dynamic raw);

  @protected
  LowPrintInfo dco_decode_low_print_info(dynamic raw);

  @protected
  Candlestick? dco_decode_opt_box_autoadd_candlestick(dynamic raw);

  @protected
  CrosshairPrintInfo? dco_decode_opt_box_autoadd_crosshair_print_info(
      dynamic raw);

  @protected
  HighPrintInfo? dco_decode_opt_box_autoadd_high_print_info(dynamic raw);

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw);

  @protected
  LivePricePrintInfo? dco_decode_opt_box_autoadd_live_price_print_info(
      dynamic raw);

  @protected
  LowPrintInfo? dco_decode_opt_box_autoadd_low_print_info(dynamic raw);

  @protected
  (double, double)? dco_decode_opt_box_autoadd_record_f_64_f_64(dynamic raw);

  @protected
  PriceCalculator dco_decode_price_calculator(dynamic raw);

  @protected
  (double, double) dco_decode_record_f_64_f_64(dynamic raw);

  @protected
  (double, double, double) dco_decode_record_f_64_f_64_f_64(dynamic raw);

  @protected
  (PlatformInt64, BigInt) dco_decode_record_i_64_usize(dynamic raw);

  @protected
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) dco_decode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
      dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  Map<PlatformInt64, BigInt> sse_decode_Map_i_64_usize_None(
      SseDeserializer deserializer);

  @protected
  Set<PlatformInt64> sse_decode_Set_i_64_None(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Candlestick sse_decode_box_autoadd_candlestick(SseDeserializer deserializer);

  @protected
  CrosshairPrintInfo sse_decode_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer);

  @protected
  HighPrintInfo sse_decode_box_autoadd_high_print_info(
      SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  LivePricePrintInfo sse_decode_box_autoadd_live_price_print_info(
      SseDeserializer deserializer);

  @protected
  LowPrintInfo sse_decode_box_autoadd_low_print_info(
      SseDeserializer deserializer);

  @protected
  PriceCalculator sse_decode_box_autoadd_price_calculator(
      SseDeserializer deserializer);

  @protected
  (double, double) sse_decode_box_autoadd_record_f_64_f_64(
      SseDeserializer deserializer);

  @protected
  Candlestick sse_decode_candlestick(SseDeserializer deserializer);

  @protected
  CandlestickPrintInfo sse_decode_candlestick_print_info(
      SseDeserializer deserializer);

  @protected
  CrosshairPrintInfo sse_decode_crosshair_print_info(
      SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  GridPricePrintInfo sse_decode_grid_price_print_info(
      SseDeserializer deserializer);

  @protected
  GridTimePrintInfo sse_decode_grid_time_print_info(
      SseDeserializer deserializer);

  @protected
  HighPrintInfo sse_decode_high_print_info(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_8(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<Candlestick> sse_decode_list_candlestick(SseDeserializer deserializer);

  @protected
  List<CandlestickPrintInfo> sse_decode_list_candlestick_print_info(
      SseDeserializer deserializer);

  @protected
  List<GridPricePrintInfo> sse_decode_list_grid_price_print_info(
      SseDeserializer deserializer);

  @protected
  List<GridTimePrintInfo> sse_decode_list_grid_time_print_info(
      SseDeserializer deserializer);

  @protected
  List<List<String>> sse_decode_list_list_String(SseDeserializer deserializer);

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(PlatformInt64, BigInt)> sse_decode_list_record_i_64_usize(
      SseDeserializer deserializer);

  @protected
  LivePricePrintInfo sse_decode_live_price_print_info(
      SseDeserializer deserializer);

  @protected
  LowPrintInfo sse_decode_low_print_info(SseDeserializer deserializer);

  @protected
  Candlestick? sse_decode_opt_box_autoadd_candlestick(
      SseDeserializer deserializer);

  @protected
  CrosshairPrintInfo? sse_decode_opt_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer);

  @protected
  HighPrintInfo? sse_decode_opt_box_autoadd_high_print_info(
      SseDeserializer deserializer);

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  LivePricePrintInfo? sse_decode_opt_box_autoadd_live_price_print_info(
      SseDeserializer deserializer);

  @protected
  LowPrintInfo? sse_decode_opt_box_autoadd_low_print_info(
      SseDeserializer deserializer);

  @protected
  (double, double)? sse_decode_opt_box_autoadd_record_f_64_f_64(
      SseDeserializer deserializer);

  @protected
  PriceCalculator sse_decode_price_calculator(SseDeserializer deserializer);

  @protected
  (double, double) sse_decode_record_f_64_f_64(SseDeserializer deserializer);

  @protected
  (double, double, double) sse_decode_record_f_64_f_64_f_64(
      SseDeserializer deserializer);

  @protected
  (PlatformInt64, BigInt) sse_decode_record_i_64_usize(
      SseDeserializer deserializer);

  @protected
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) sse_decode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  void sse_encode_Map_i_64_usize_None(
      Map<PlatformInt64, BigInt> self, SseSerializer serializer);

  @protected
  void sse_encode_Set_i_64_None(
      Set<PlatformInt64> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_candlestick(
      Candlestick self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_crosshair_print_info(
      CrosshairPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_high_print_info(
      HighPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_live_price_print_info(
      LivePricePrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_low_print_info(
      LowPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_price_calculator(
      PriceCalculator self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_record_f_64_f_64(
      (double, double) self, SseSerializer serializer);

  @protected
  void sse_encode_candlestick(Candlestick self, SseSerializer serializer);

  @protected
  void sse_encode_candlestick_print_info(
      CandlestickPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_crosshair_print_info(
      CrosshairPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_grid_price_print_info(
      GridPricePrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_grid_time_print_info(
      GridTimePrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_high_print_info(HighPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_candlestick(
      List<Candlestick> self, SseSerializer serializer);

  @protected
  void sse_encode_list_candlestick_print_info(
      List<CandlestickPrintInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_grid_price_print_info(
      List<GridPricePrintInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_grid_time_print_info(
      List<GridTimePrintInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_String(
      List<List<String>> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_i_64_usize(
      List<(PlatformInt64, BigInt)> self, SseSerializer serializer);

  @protected
  void sse_encode_live_price_print_info(
      LivePricePrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_low_print_info(LowPrintInfo self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_candlestick(
      Candlestick? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_crosshair_print_info(
      CrosshairPrintInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_high_print_info(
      HighPrintInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_live_price_print_info(
      LivePricePrintInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_low_print_info(
      LowPrintInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_record_f_64_f_64(
      (double, double)? self, SseSerializer serializer);

  @protected
  void sse_encode_price_calculator(
      PriceCalculator self, SseSerializer serializer);

  @protected
  void sse_encode_record_f_64_f_64(
      (double, double) self, SseSerializer serializer);

  @protected
  void sse_encode_record_f_64_f_64_f_64(
      (double, double, double) self, SseSerializer serializer);

  @protected
  void sse_encode_record_i_64_usize(
      (PlatformInt64, BigInt) self, SseSerializer serializer);

  @protected
  void
      sse_encode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
          (
            List<CandlestickPrintInfo>,
            List<GridTimePrintInfo>,
            List<GridPricePrintInfo>,
            LivePricePrintInfo?,
            HighPrintInfo?,
            LowPrintInfo?,
            CrosshairPrintInfo?
          ) self,
          SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {}
