// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/calculator.dart';
import 'api/models.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1491123074;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'candlestick_chart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Candlestick> crateApiModelsCandlestickFromServiceData(
      {required List<String> data});

  Future<List<Candlestick>> crateApiModelsCandlestickListFromServiceData(
      {required List<List<String>> data});

  Future<Candlestick> crateApiModelsCandlestickMarkAsConfirmed(
      {required Candlestick that});

  Future<Map<PlatformInt64, BigInt>> crateApiCalculatorFindCandlestickIndices(
      {required List<Candlestick> list,
      required Set<PlatformInt64> timestamps,
      required BigInt limit});

  Future<(double, double)> crateApiCalculatorFindCandlesticksPriceRange(
      {required List<Candlestick> candlesticks});

  String crateApiCalculatorGreet({required String name});

  Future<void> crateApiInitApp();

  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) crateApiModelsPriceCalculatorGetCandlestickPrintInfo(
      {required PriceCalculator that});

  PriceCalculator crateApiModelsPriceCalculatorNew(
      {required double viewportHeight,
      required double viewportWidth,
      required double offsetX,
      required double scaleX,
      required double candleWidth,
      required double candleSpacing,
      required List<Candlestick> candlesticks,
      required double topSafeAreaHeight,
      required double bottomSafeAreaHeight,
      required double bottomTimeLabelHeight,
      required int gridTimeCount,
      required double scaleY,
      (double, double)? crosshairOffset});

  Future<double> crateApiModelsPriceCalculatorPriceToY(
      {required double price,
      required double topPrice,
      required double priceDensity});

  Future<double> crateApiModelsPriceCalculatorYToPrice(
      {required double y,
      required double topPrice,
      required double priceDensity});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Candlestick> crateApiModelsCandlestickFromServiceData(
      {required List<String> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_candlestick,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsCandlestickFromServiceDataConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsCandlestickFromServiceDataConstMeta =>
      const TaskConstMeta(
        debugName: "candlestick_from_service_data",
        argNames: ["data"],
      );

  @override
  Future<List<Candlestick>> crateApiModelsCandlestickListFromServiceData(
      {required List<List<String>> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_String(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_candlestick,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsCandlestickListFromServiceDataConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsCandlestickListFromServiceDataConstMeta =>
      const TaskConstMeta(
        debugName: "candlestick_list_from_service_data",
        argNames: ["data"],
      );

  @override
  Future<Candlestick> crateApiModelsCandlestickMarkAsConfirmed(
      {required Candlestick that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_candlestick(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_candlestick,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsCandlestickMarkAsConfirmedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsCandlestickMarkAsConfirmedConstMeta =>
      const TaskConstMeta(
        debugName: "candlestick_mark_as_confirmed",
        argNames: ["that"],
      );

  @override
  Future<Map<PlatformInt64, BigInt>> crateApiCalculatorFindCandlestickIndices(
      {required List<Candlestick> list,
      required Set<PlatformInt64> timestamps,
      required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_candlestick(list, serializer);
        sse_encode_Set_i_64_None(timestamps, serializer);
        sse_encode_usize(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_64_usize_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCalculatorFindCandlestickIndicesConstMeta,
      argValues: [list, timestamps, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCalculatorFindCandlestickIndicesConstMeta =>
      const TaskConstMeta(
        debugName: "find_candlestick_indices",
        argNames: ["list", "timestamps", "limit"],
      );

  @override
  Future<(double, double)> crateApiCalculatorFindCandlesticksPriceRange(
      {required List<Candlestick> candlesticks}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_candlestick(candlesticks, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_f_64_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCalculatorFindCandlesticksPriceRangeConstMeta,
      argValues: [candlesticks],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCalculatorFindCandlesticksPriceRangeConstMeta =>
      const TaskConstMeta(
        debugName: "find_candlesticks_price_range",
        argNames: ["candlesticks"],
      );

  @override
  String crateApiCalculatorGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCalculatorGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCalculatorGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) crateApiModelsPriceCalculatorGetCandlestickPrintInfo(
      {required PriceCalculator that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_price_calculator(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsPriceCalculatorGetCandlestickPrintInfoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiModelsPriceCalculatorGetCandlestickPrintInfoConstMeta =>
          const TaskConstMeta(
            debugName: "price_calculator_get_candlestick_print_info",
            argNames: ["that"],
          );

  @override
  PriceCalculator crateApiModelsPriceCalculatorNew(
      {required double viewportHeight,
      required double viewportWidth,
      required double offsetX,
      required double scaleX,
      required double candleWidth,
      required double candleSpacing,
      required List<Candlestick> candlesticks,
      required double topSafeAreaHeight,
      required double bottomSafeAreaHeight,
      required double bottomTimeLabelHeight,
      required int gridTimeCount,
      required double scaleY,
      (double, double)? crosshairOffset}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(viewportHeight, serializer);
        sse_encode_f_64(viewportWidth, serializer);
        sse_encode_f_64(offsetX, serializer);
        sse_encode_f_64(scaleX, serializer);
        sse_encode_f_64(candleWidth, serializer);
        sse_encode_f_64(candleSpacing, serializer);
        sse_encode_list_candlestick(candlesticks, serializer);
        sse_encode_f_64(topSafeAreaHeight, serializer);
        sse_encode_f_64(bottomSafeAreaHeight, serializer);
        sse_encode_f_64(bottomTimeLabelHeight, serializer);
        sse_encode_i_8(gridTimeCount, serializer);
        sse_encode_f_64(scaleY, serializer);
        sse_encode_opt_box_autoadd_record_f_64_f_64(
            crosshairOffset, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_price_calculator,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsPriceCalculatorNewConstMeta,
      argValues: [
        viewportHeight,
        viewportWidth,
        offsetX,
        scaleX,
        candleWidth,
        candleSpacing,
        candlesticks,
        topSafeAreaHeight,
        bottomSafeAreaHeight,
        bottomTimeLabelHeight,
        gridTimeCount,
        scaleY,
        crosshairOffset
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsPriceCalculatorNewConstMeta =>
      const TaskConstMeta(
        debugName: "price_calculator_new",
        argNames: [
          "viewportHeight",
          "viewportWidth",
          "offsetX",
          "scaleX",
          "candleWidth",
          "candleSpacing",
          "candlesticks",
          "topSafeAreaHeight",
          "bottomSafeAreaHeight",
          "bottomTimeLabelHeight",
          "gridTimeCount",
          "scaleY",
          "crosshairOffset"
        ],
      );

  @override
  Future<double> crateApiModelsPriceCalculatorPriceToY(
      {required double price,
      required double topPrice,
      required double priceDensity}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(price, serializer);
        sse_encode_f_64(topPrice, serializer);
        sse_encode_f_64(priceDensity, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsPriceCalculatorPriceToYConstMeta,
      argValues: [price, topPrice, priceDensity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsPriceCalculatorPriceToYConstMeta =>
      const TaskConstMeta(
        debugName: "price_calculator_price_to_y",
        argNames: ["price", "topPrice", "priceDensity"],
      );

  @override
  Future<double> crateApiModelsPriceCalculatorYToPrice(
      {required double y,
      required double topPrice,
      required double priceDensity}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(y, serializer);
        sse_encode_f_64(topPrice, serializer);
        sse_encode_f_64(priceDensity, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelsPriceCalculatorYToPriceConstMeta,
      argValues: [y, topPrice, priceDensity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiModelsPriceCalculatorYToPriceConstMeta =>
      const TaskConstMeta(
        debugName: "price_calculator_y_to_price",
        argNames: ["y", "topPrice", "priceDensity"],
      );

  @protected
  Map<PlatformInt64, BigInt> dco_decode_Map_i_64_usize_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_64_usize(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Set<PlatformInt64> dco_decode_Set_i_64_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_prim_i_64_strict(raw));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Candlestick dco_decode_box_autoadd_candlestick(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_candlestick(raw);
  }

  @protected
  CrosshairPrintInfo dco_decode_box_autoadd_crosshair_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_crosshair_print_info(raw);
  }

  @protected
  HighPrintInfo dco_decode_box_autoadd_high_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_high_print_info(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  LivePricePrintInfo dco_decode_box_autoadd_live_price_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_live_price_print_info(raw);
  }

  @protected
  LowPrintInfo dco_decode_box_autoadd_low_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_low_print_info(raw);
  }

  @protected
  PriceCalculator dco_decode_box_autoadd_price_calculator(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_price_calculator(raw);
  }

  @protected
  (double, double) dco_decode_box_autoadd_record_f_64_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (double, double);
  }

  @protected
  Candlestick dco_decode_candlestick(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Candlestick(
      timestamp: dco_decode_i_64(arr[0]),
      open: dco_decode_f_64(arr[1]),
      high: dco_decode_f_64(arr[2]),
      low: dco_decode_f_64(arr[3]),
      close: dco_decode_f_64(arr[4]),
      isConfirmed: dco_decode_bool(arr[5]),
    );
  }

  @protected
  CandlestickPrintInfo dco_decode_candlestick_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CandlestickPrintInfo(
      candlestick: dco_decode_candlestick(arr[0]),
      openY: dco_decode_f_64(arr[1]),
      closeY: dco_decode_f_64(arr[2]),
      contentStartX: dco_decode_f_64(arr[3]),
      contentEndX: dco_decode_f_64(arr[4]),
      shadow: dco_decode_record_f_64_f_64_f_64(arr[5]),
    );
  }

  @protected
  CrosshairPrintInfo dco_decode_crosshair_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return CrosshairPrintInfo(
      candlestick: dco_decode_opt_box_autoadd_candlestick(arr[0]),
      timestamp: dco_decode_i_64(arr[1]),
      price: dco_decode_f_64(arr[2]),
      x: dco_decode_f_64(arr[3]),
      y: dco_decode_f_64(arr[4]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  GridPricePrintInfo dco_decode_grid_price_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GridPricePrintInfo(
      price: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  GridTimePrintInfo dco_decode_grid_time_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GridTimePrintInfo(
      timestamp: dco_decode_opt_box_autoadd_i_64(arr[0]),
      x: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  HighPrintInfo dco_decode_high_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return HighPrintInfo(
      price: dco_decode_f_64(arr[0]),
      x: dco_decode_f_64(arr[1]),
      endX: dco_decode_f_64(arr[2]),
      y: dco_decode_f_64(arr[3]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Candlestick> dco_decode_list_candlestick(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_candlestick).toList();
  }

  @protected
  List<CandlestickPrintInfo> dco_decode_list_candlestick_print_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_candlestick_print_info)
        .toList();
  }

  @protected
  List<GridPricePrintInfo> dco_decode_list_grid_price_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_grid_price_print_info)
        .toList();
  }

  @protected
  List<GridTimePrintInfo> dco_decode_list_grid_time_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_grid_time_print_info).toList();
  }

  @protected
  List<List<String>> dco_decode_list_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_String).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeInt64List(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(PlatformInt64, BigInt)> dco_decode_list_record_i_64_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_64_usize).toList();
  }

  @protected
  LivePricePrintInfo dco_decode_live_price_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return LivePricePrintInfo(
      price: dco_decode_f_64(arr[0]),
      x: dco_decode_f_64(arr[1]),
      endX: dco_decode_f_64(arr[2]),
      y: dco_decode_f_64(arr[3]),
      timestamp: dco_decode_i_64(arr[4]),
      isVisible: dco_decode_bool(arr[5]),
    );
  }

  @protected
  LowPrintInfo dco_decode_low_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LowPrintInfo(
      price: dco_decode_f_64(arr[0]),
      x: dco_decode_f_64(arr[1]),
      endX: dco_decode_f_64(arr[2]),
      y: dco_decode_f_64(arr[3]),
    );
  }

  @protected
  Candlestick? dco_decode_opt_box_autoadd_candlestick(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_candlestick(raw);
  }

  @protected
  CrosshairPrintInfo? dco_decode_opt_box_autoadd_crosshair_print_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_crosshair_print_info(raw);
  }

  @protected
  HighPrintInfo? dco_decode_opt_box_autoadd_high_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_high_print_info(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  LivePricePrintInfo? dco_decode_opt_box_autoadd_live_price_print_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_live_price_print_info(raw);
  }

  @protected
  LowPrintInfo? dco_decode_opt_box_autoadd_low_print_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_low_print_info(raw);
  }

  @protected
  (double, double)? dco_decode_opt_box_autoadd_record_f_64_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_record_f_64_f_64(raw);
  }

  @protected
  PriceCalculator dco_decode_price_calculator(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return PriceCalculator.raw(
      viewportHeight: dco_decode_f_64(arr[0]),
      viewportWidth: dco_decode_f_64(arr[1]),
      offsetX: dco_decode_f_64(arr[2]),
      scaleX: dco_decode_f_64(arr[3]),
      candleWidth: dco_decode_f_64(arr[4]),
      candleSpacing: dco_decode_f_64(arr[5]),
      candlesticks: dco_decode_list_candlestick(arr[6]),
      topSafeAreaHeight: dco_decode_f_64(arr[7]),
      bottomSafeAreaHeight: dco_decode_f_64(arr[8]),
      bottomTimeLabelHeight: dco_decode_f_64(arr[9]),
      gridTimeCount: dco_decode_i_8(arr[10]),
      scaleY: dco_decode_f_64(arr[11]),
      crosshairOffset: dco_decode_opt_box_autoadd_record_f_64_f_64(arr[12]),
    );
  }

  @protected
  (double, double) dco_decode_record_f_64_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_f_64(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  (double, double, double) dco_decode_record_f_64_f_64_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_f_64(arr[0]),
      dco_decode_f_64(arr[1]),
      dco_decode_f_64(arr[2]),
    );
  }

  @protected
  (PlatformInt64, BigInt) dco_decode_record_i_64_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_64(arr[0]),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) dco_decode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) {
      throw Exception('Expected 7 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_candlestick_print_info(arr[0]),
      dco_decode_list_grid_time_print_info(arr[1]),
      dco_decode_list_grid_price_print_info(arr[2]),
      dco_decode_opt_box_autoadd_live_price_print_info(arr[3]),
      dco_decode_opt_box_autoadd_high_print_info(arr[4]),
      dco_decode_opt_box_autoadd_low_print_info(arr[5]),
      dco_decode_opt_box_autoadd_crosshair_print_info(arr[6]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Map<PlatformInt64, BigInt> sse_decode_Map_i_64_usize_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_64_usize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Set<PlatformInt64> sse_decode_Set_i_64_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_64_strict(deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Candlestick sse_decode_box_autoadd_candlestick(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_candlestick(deserializer));
  }

  @protected
  CrosshairPrintInfo sse_decode_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_crosshair_print_info(deserializer));
  }

  @protected
  HighPrintInfo sse_decode_box_autoadd_high_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_high_print_info(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  LivePricePrintInfo sse_decode_box_autoadd_live_price_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_live_price_print_info(deserializer));
  }

  @protected
  LowPrintInfo sse_decode_box_autoadd_low_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_low_print_info(deserializer));
  }

  @protected
  PriceCalculator sse_decode_box_autoadd_price_calculator(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_price_calculator(deserializer));
  }

  @protected
  (double, double) sse_decode_box_autoadd_record_f_64_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_f_64_f_64(deserializer));
  }

  @protected
  Candlestick sse_decode_candlestick(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timestamp = sse_decode_i_64(deserializer);
    var var_open = sse_decode_f_64(deserializer);
    var var_high = sse_decode_f_64(deserializer);
    var var_low = sse_decode_f_64(deserializer);
    var var_close = sse_decode_f_64(deserializer);
    var var_isConfirmed = sse_decode_bool(deserializer);
    return Candlestick(
        timestamp: var_timestamp,
        open: var_open,
        high: var_high,
        low: var_low,
        close: var_close,
        isConfirmed: var_isConfirmed);
  }

  @protected
  CandlestickPrintInfo sse_decode_candlestick_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_candlestick = sse_decode_candlestick(deserializer);
    var var_openY = sse_decode_f_64(deserializer);
    var var_closeY = sse_decode_f_64(deserializer);
    var var_contentStartX = sse_decode_f_64(deserializer);
    var var_contentEndX = sse_decode_f_64(deserializer);
    var var_shadow = sse_decode_record_f_64_f_64_f_64(deserializer);
    return CandlestickPrintInfo(
        candlestick: var_candlestick,
        openY: var_openY,
        closeY: var_closeY,
        contentStartX: var_contentStartX,
        contentEndX: var_contentEndX,
        shadow: var_shadow);
  }

  @protected
  CrosshairPrintInfo sse_decode_crosshair_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_candlestick = sse_decode_opt_box_autoadd_candlestick(deserializer);
    var var_timestamp = sse_decode_i_64(deserializer);
    var var_price = sse_decode_f_64(deserializer);
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return CrosshairPrintInfo(
        candlestick: var_candlestick,
        timestamp: var_timestamp,
        price: var_price,
        x: var_x,
        y: var_y);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  GridPricePrintInfo sse_decode_grid_price_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_price = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return GridPricePrintInfo(price: var_price, y: var_y);
  }

  @protected
  GridTimePrintInfo sse_decode_grid_time_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timestamp = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_x = sse_decode_f_64(deserializer);
    return GridTimePrintInfo(timestamp: var_timestamp, x: var_x);
  }

  @protected
  HighPrintInfo sse_decode_high_print_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_price = sse_decode_f_64(deserializer);
    var var_x = sse_decode_f_64(deserializer);
    var var_endX = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return HighPrintInfo(price: var_price, x: var_x, endX: var_endX, y: var_y);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Candlestick> sse_decode_list_candlestick(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Candlestick>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_candlestick(deserializer));
    }
    return ans_;
  }

  @protected
  List<CandlestickPrintInfo> sse_decode_list_candlestick_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CandlestickPrintInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_candlestick_print_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<GridPricePrintInfo> sse_decode_list_grid_price_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GridPricePrintInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_grid_price_print_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<GridTimePrintInfo> sse_decode_list_grid_time_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GridTimePrintInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_grid_time_print_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<String>> sse_decode_list_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<String>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_String(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(PlatformInt64, BigInt)> sse_decode_list_record_i_64_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(PlatformInt64, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_64_usize(deserializer));
    }
    return ans_;
  }

  @protected
  LivePricePrintInfo sse_decode_live_price_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_price = sse_decode_f_64(deserializer);
    var var_x = sse_decode_f_64(deserializer);
    var var_endX = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    var var_timestamp = sse_decode_i_64(deserializer);
    var var_isVisible = sse_decode_bool(deserializer);
    return LivePricePrintInfo(
        price: var_price,
        x: var_x,
        endX: var_endX,
        y: var_y,
        timestamp: var_timestamp,
        isVisible: var_isVisible);
  }

  @protected
  LowPrintInfo sse_decode_low_print_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_price = sse_decode_f_64(deserializer);
    var var_x = sse_decode_f_64(deserializer);
    var var_endX = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return LowPrintInfo(price: var_price, x: var_x, endX: var_endX, y: var_y);
  }

  @protected
  Candlestick? sse_decode_opt_box_autoadd_candlestick(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_candlestick(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CrosshairPrintInfo? sse_decode_opt_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_crosshair_print_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HighPrintInfo? sse_decode_opt_box_autoadd_high_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_high_print_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LivePricePrintInfo? sse_decode_opt_box_autoadd_live_price_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_live_price_print_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LowPrintInfo? sse_decode_opt_box_autoadd_low_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_low_print_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (double, double)? sse_decode_opt_box_autoadd_record_f_64_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_f_64_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PriceCalculator sse_decode_price_calculator(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_viewportHeight = sse_decode_f_64(deserializer);
    var var_viewportWidth = sse_decode_f_64(deserializer);
    var var_offsetX = sse_decode_f_64(deserializer);
    var var_scaleX = sse_decode_f_64(deserializer);
    var var_candleWidth = sse_decode_f_64(deserializer);
    var var_candleSpacing = sse_decode_f_64(deserializer);
    var var_candlesticks = sse_decode_list_candlestick(deserializer);
    var var_topSafeAreaHeight = sse_decode_f_64(deserializer);
    var var_bottomSafeAreaHeight = sse_decode_f_64(deserializer);
    var var_bottomTimeLabelHeight = sse_decode_f_64(deserializer);
    var var_gridTimeCount = sse_decode_i_8(deserializer);
    var var_scaleY = sse_decode_f_64(deserializer);
    var var_crosshairOffset =
        sse_decode_opt_box_autoadd_record_f_64_f_64(deserializer);
    return PriceCalculator.raw(
        viewportHeight: var_viewportHeight,
        viewportWidth: var_viewportWidth,
        offsetX: var_offsetX,
        scaleX: var_scaleX,
        candleWidth: var_candleWidth,
        candleSpacing: var_candleSpacing,
        candlesticks: var_candlesticks,
        topSafeAreaHeight: var_topSafeAreaHeight,
        bottomSafeAreaHeight: var_bottomSafeAreaHeight,
        bottomTimeLabelHeight: var_bottomTimeLabelHeight,
        gridTimeCount: var_gridTimeCount,
        scaleY: var_scaleY,
        crosshairOffset: var_crosshairOffset);
  }

  @protected
  (double, double) sse_decode_record_f_64_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_f_64(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (double, double, double) sse_decode_record_f_64_f_64_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_f_64(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    var var_field2 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (PlatformInt64, BigInt) sse_decode_record_i_64_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) sse_decode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_candlestick_print_info(deserializer);
    var var_field1 = sse_decode_list_grid_time_print_info(deserializer);
    var var_field2 = sse_decode_list_grid_price_print_info(deserializer);
    var var_field3 =
        sse_decode_opt_box_autoadd_live_price_print_info(deserializer);
    var var_field4 = sse_decode_opt_box_autoadd_high_print_info(deserializer);
    var var_field5 = sse_decode_opt_box_autoadd_low_print_info(deserializer);
    var var_field6 =
        sse_decode_opt_box_autoadd_crosshair_print_info(deserializer);
    return (
      var_field0,
      var_field1,
      var_field2,
      var_field3,
      var_field4,
      var_field5,
      var_field6
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_Map_i_64_usize_None(
      Map<PlatformInt64, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_64_usize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Set_i_64_None(
      Set<PlatformInt64> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(
        Int64List.fromList(self.toList()), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_candlestick(
      Candlestick self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_candlestick(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_crosshair_print_info(
      CrosshairPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_crosshair_print_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_high_print_info(
      HighPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_high_print_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_live_price_print_info(
      LivePricePrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_live_price_print_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_low_print_info(
      LowPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_low_print_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_price_calculator(
      PriceCalculator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_price_calculator(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_f_64_f_64(
      (double, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_f_64_f_64(self, serializer);
  }

  @protected
  void sse_encode_candlestick(Candlestick self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timestamp, serializer);
    sse_encode_f_64(self.open, serializer);
    sse_encode_f_64(self.high, serializer);
    sse_encode_f_64(self.low, serializer);
    sse_encode_f_64(self.close, serializer);
    sse_encode_bool(self.isConfirmed, serializer);
  }

  @protected
  void sse_encode_candlestick_print_info(
      CandlestickPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_candlestick(self.candlestick, serializer);
    sse_encode_f_64(self.openY, serializer);
    sse_encode_f_64(self.closeY, serializer);
    sse_encode_f_64(self.contentStartX, serializer);
    sse_encode_f_64(self.contentEndX, serializer);
    sse_encode_record_f_64_f_64_f_64(self.shadow, serializer);
  }

  @protected
  void sse_encode_crosshair_print_info(
      CrosshairPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_candlestick(self.candlestick, serializer);
    sse_encode_i_64(self.timestamp, serializer);
    sse_encode_f_64(self.price, serializer);
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_grid_price_print_info(
      GridPricePrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.price, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_grid_time_print_info(
      GridTimePrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.timestamp, serializer);
    sse_encode_f_64(self.x, serializer);
  }

  @protected
  void sse_encode_high_print_info(
      HighPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.price, serializer);
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.endX, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_candlestick(
      List<Candlestick> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_candlestick(item, serializer);
    }
  }

  @protected
  void sse_encode_list_candlestick_print_info(
      List<CandlestickPrintInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_candlestick_print_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_grid_price_print_info(
      List<GridPricePrintInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_grid_price_print_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_grid_time_print_info(
      List<GridTimePrintInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_grid_time_print_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_String(
      List<List<String>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_i_64_usize(
      List<(PlatformInt64, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_64_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_live_price_print_info(
      LivePricePrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.price, serializer);
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.endX, serializer);
    sse_encode_f_64(self.y, serializer);
    sse_encode_i_64(self.timestamp, serializer);
    sse_encode_bool(self.isVisible, serializer);
  }

  @protected
  void sse_encode_low_print_info(LowPrintInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.price, serializer);
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.endX, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_candlestick(
      Candlestick? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_candlestick(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_crosshair_print_info(
      CrosshairPrintInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_crosshair_print_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_high_print_info(
      HighPrintInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_high_print_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_live_price_print_info(
      LivePricePrintInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_live_price_print_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_low_print_info(
      LowPrintInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_low_print_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_f_64_f_64(
      (double, double)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_f_64_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_price_calculator(
      PriceCalculator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.viewportHeight, serializer);
    sse_encode_f_64(self.viewportWidth, serializer);
    sse_encode_f_64(self.offsetX, serializer);
    sse_encode_f_64(self.scaleX, serializer);
    sse_encode_f_64(self.candleWidth, serializer);
    sse_encode_f_64(self.candleSpacing, serializer);
    sse_encode_list_candlestick(self.candlesticks, serializer);
    sse_encode_f_64(self.topSafeAreaHeight, serializer);
    sse_encode_f_64(self.bottomSafeAreaHeight, serializer);
    sse_encode_f_64(self.bottomTimeLabelHeight, serializer);
    sse_encode_i_8(self.gridTimeCount, serializer);
    sse_encode_f_64(self.scaleY, serializer);
    sse_encode_opt_box_autoadd_record_f_64_f_64(
        self.crosshairOffset, serializer);
  }

  @protected
  void sse_encode_record_f_64_f_64(
      (double, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_f_64_f_64_f_64(
      (double, double, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
    sse_encode_f_64(self.$3, serializer);
  }

  @protected
  void sse_encode_record_i_64_usize(
      (PlatformInt64, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_list_candlestick_print_info_list_grid_time_print_info_list_grid_price_print_info_opt_box_autoadd_live_price_print_info_opt_box_autoadd_high_print_info_opt_box_autoadd_low_print_info_opt_box_autoadd_crosshair_print_info(
          (
            List<CandlestickPrintInfo>,
            List<GridTimePrintInfo>,
            List<GridPricePrintInfo>,
            LivePricePrintInfo?,
            HighPrintInfo?,
            LowPrintInfo?,
            CrosshairPrintInfo?
          ) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_candlestick_print_info(self.$1, serializer);
    sse_encode_list_grid_time_print_info(self.$2, serializer);
    sse_encode_list_grid_price_print_info(self.$3, serializer);
    sse_encode_opt_box_autoadd_live_price_print_info(self.$4, serializer);
    sse_encode_opt_box_autoadd_high_print_info(self.$5, serializer);
    sse_encode_opt_box_autoadd_low_print_info(self.$6, serializer);
    sse_encode_opt_box_autoadd_crosshair_print_info(self.$7, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
