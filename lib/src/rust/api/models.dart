// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`

/// 数据模型原型参考 https://www.okx.com/docs-v5/zh/?python#public-data-rest-api-get-index-candlesticks
/// 单根蜡烛的于接口内的数据为 [ts,o,h,l,c,confirm]
/// ts	      String	开始时间，Unix时间戳的毫秒数格式，如 1597026383085
/// o	      String	开盘价格
/// h	      String	最高价格
/// l	      String	最低价格
/// c	      String	收盘价格
/// confirm	String	K线状态 (0 代表 K 线未完结，1 代表 K 线已完结。)
class Candlestick {
  final PlatformInt64 timestamp;
  final double open;
  final double high;
  final double low;
  final double close;
  final bool isConfirmed;

  const Candlestick({
    required this.timestamp,
    required this.open,
    required this.high,
    required this.low,
    required this.close,
    required this.isConfirmed,
  });

  /// 从 `Vec<String>` 创建 `Candlestick`
  static Future<Candlestick> fromServiceData({required List<String> data}) =>
      RustLib.instance.api.crateApiModelsCandlestickFromServiceData(data: data);

  /// 从 `Vec<Vec<String>>` 创建 `Vec<Candlestick>`
  static Future<List<Candlestick>> listFromServiceData(
          {required List<List<String>> data}) =>
      RustLib.instance.api
          .crateApiModelsCandlestickListFromServiceData(data: data);

  /// 将 `is_confirmed` 设置为 `true`
  Future<Candlestick> markAsConfirmed() =>
      RustLib.instance.api.crateApiModelsCandlestickMarkAsConfirmed(
        that: this,
      );

  @override
  int get hashCode =>
      timestamp.hashCode ^
      open.hashCode ^
      high.hashCode ^
      low.hashCode ^
      close.hashCode ^
      isConfirmed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Candlestick &&
          runtimeType == other.runtimeType &&
          timestamp == other.timestamp &&
          open == other.open &&
          high == other.high &&
          low == other.low &&
          close == other.close &&
          isConfirmed == other.isConfirmed;
}

/// 蜡烛图绘制信息，包括蜡烛数据、蜡烛矩形的四个顶点坐标和影线的信息
class CandlestickPrintInfo {
  final Candlestick candlestick;

  /// 开盘价Y坐标 open
  final double openY;

  /// 收盘价Y坐标 close
  final double closeY;

  /// 绘制起点
  final double contentStartX;

  /// 绘制终点
  final double contentEndX;

  /// 影线 (x坐标,最低点y坐标,最高点y坐标)
  final (double, double, double) shadow;

  const CandlestickPrintInfo({
    required this.candlestick,
    required this.openY,
    required this.closeY,
    required this.contentStartX,
    required this.contentEndX,
    required this.shadow,
  });

  @override
  int get hashCode =>
      candlestick.hashCode ^
      openY.hashCode ^
      closeY.hashCode ^
      contentStartX.hashCode ^
      contentEndX.hashCode ^
      shadow.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CandlestickPrintInfo &&
          runtimeType == other.runtimeType &&
          candlestick == other.candlestick &&
          openY == other.openY &&
          closeY == other.closeY &&
          contentStartX == other.contentStartX &&
          contentEndX == other.contentEndX &&
          shadow == other.shadow;
}

/// 十字光标信息
class CrosshairPrintInfo {
  final Candlestick? candlestick;
  final PlatformInt64 timestamp;
  final double price;
  final double x;
  final double y;

  const CrosshairPrintInfo({
    this.candlestick,
    required this.timestamp,
    required this.price,
    required this.x,
    required this.y,
  });

  @override
  int get hashCode =>
      candlestick.hashCode ^
      timestamp.hashCode ^
      price.hashCode ^
      x.hashCode ^
      y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CrosshairPrintInfo &&
          runtimeType == other.runtimeType &&
          candlestick == other.candlestick &&
          timestamp == other.timestamp &&
          price == other.price &&
          x == other.x &&
          y == other.y;
}

/// 横向网格线信息，包括y坐标和对应的价格线
class GridPricePrintInfo {
  final double price;
  final double y;

  const GridPricePrintInfo({
    required this.price,
    required this.y,
  });

  @override
  int get hashCode => price.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GridPricePrintInfo &&
          runtimeType == other.runtimeType &&
          price == other.price &&
          y == other.y;
}

/// 纵向网格线信息，包括x坐标和对应的时间戳（如果有）
class GridTimePrintInfo {
  final PlatformInt64? timestamp;
  final double x;

  const GridTimePrintInfo({
    this.timestamp,
    required this.x,
  });

  @override
  int get hashCode => timestamp.hashCode ^ x.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GridTimePrintInfo &&
          runtimeType == other.runtimeType &&
          timestamp == other.timestamp &&
          x == other.x;
}

/// 价格最高点标记
class HighPrintInfo {
  final double price;
  final double x;
  final double endX;
  final double y;

  const HighPrintInfo({
    required this.price,
    required this.x,
    required this.endX,
    required this.y,
  });

  @override
  int get hashCode => price.hashCode ^ x.hashCode ^ endX.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is HighPrintInfo &&
          runtimeType == other.runtimeType &&
          price == other.price &&
          x == other.x &&
          endX == other.endX &&
          y == other.y;
}

/// 实时价格线信息
class LivePricePrintInfo {
  /// close_y
  final double price;

  /// 起始
  final double x;

  /// 结尾坐标
  final double endX;
  final double y;

  /// 本周期结束时间
  final PlatformInt64 timestamp;

  /// 是否可见
  final bool isVisible;

  const LivePricePrintInfo({
    required this.price,
    required this.x,
    required this.endX,
    required this.y,
    required this.timestamp,
    required this.isVisible,
  });

  @override
  int get hashCode =>
      price.hashCode ^
      x.hashCode ^
      endX.hashCode ^
      y.hashCode ^
      timestamp.hashCode ^
      isVisible.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LivePricePrintInfo &&
          runtimeType == other.runtimeType &&
          price == other.price &&
          x == other.x &&
          endX == other.endX &&
          y == other.y &&
          timestamp == other.timestamp &&
          isVisible == other.isVisible;
}

/// 价格最低点标记
class LowPrintInfo {
  final double price;
  final double x;
  final double endX;
  final double y;

  const LowPrintInfo({
    required this.price,
    required this.x,
    required this.endX,
    required this.y,
  });

  @override
  int get hashCode => price.hashCode ^ x.hashCode ^ endX.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LowPrintInfo &&
          runtimeType == other.runtimeType &&
          price == other.price &&
          x == other.x &&
          endX == other.endX &&
          y == other.y;
}

class PriceCalculator {
  /// 视图高度
  final double viewportHeight;

  /// 视图宽度
  final double viewportWidth;

  /// 横向偏移度
  final double offsetX;

  /// 横向缩放度
  final double scaleX;

  /// 蜡烛宽度
  final double candleWidth;

  /// 蜡烛边距
  final double candleSpacing;

  /// 蜡烛列表，入参时由[新～旧]排序
  final List<Candlestick> candlesticks;

  /// 顶部边距
  final double topSafeAreaHeight;

  /// 底部边距
  final double bottomSafeAreaHeight;

  /// 底部时间轴高度
  final double bottomTimeLabelHeight;

  /// 时间网格线条数
  final int gridTimeCount;

  /// 纵向缩放度
  final double scaleY;

  /// 十字光标源
  final (double, double)? crosshairOffset;

  const PriceCalculator.raw({
    required this.viewportHeight,
    required this.viewportWidth,
    required this.offsetX,
    required this.scaleX,
    required this.candleWidth,
    required this.candleSpacing,
    required this.candlesticks,
    required this.topSafeAreaHeight,
    required this.bottomSafeAreaHeight,
    required this.bottomTimeLabelHeight,
    required this.gridTimeCount,
    required this.scaleY,
    this.crosshairOffset,
  });

  /// 仅需一个函数，把所有绘制信息统统搞定
  /// 返回值：
  /// 1. 蜡烛图绘制信息，包括蜡烛数据、蜡烛矩形的四个顶点坐标和影线的信息
  /// 2. 纵向网格线信息，包括x坐标和对应的时间戳（如果有）
  /// 3. 横向价格线信息，包括Y坐标和对应的价格
  /// 4. 实时价格线信息
  /// 5. 最高价信息
  /// 6. 最低价信息
  (
    List<CandlestickPrintInfo>,
    List<GridTimePrintInfo>,
    List<GridPricePrintInfo>,
    LivePricePrintInfo?,
    HighPrintInfo?,
    LowPrintInfo?,
    CrosshairPrintInfo?
  ) getCandlestickPrintInfo() =>
      RustLib.instance.api.crateApiModelsPriceCalculatorGetCandlestickPrintInfo(
        that: this,
      );

  factory PriceCalculator(
          {required double viewportHeight,
          required double viewportWidth,
          required double offsetX,
          required double scaleX,
          required double candleWidth,
          required double candleSpacing,
          required List<Candlestick> candlesticks,
          required double topSafeAreaHeight,
          required double bottomSafeAreaHeight,
          required double bottomTimeLabelHeight,
          required int gridTimeCount,
          required double scaleY,
          (double, double)? crosshairOffset}) =>
      RustLib.instance.api.crateApiModelsPriceCalculatorNew(
          viewportHeight: viewportHeight,
          viewportWidth: viewportWidth,
          offsetX: offsetX,
          scaleX: scaleX,
          candleWidth: candleWidth,
          candleSpacing: candleSpacing,
          candlesticks: candlesticks,
          topSafeAreaHeight: topSafeAreaHeight,
          bottomSafeAreaHeight: bottomSafeAreaHeight,
          bottomTimeLabelHeight: bottomTimeLabelHeight,
          gridTimeCount: gridTimeCount,
          scaleY: scaleY,
          crosshairOffset: crosshairOffset);

  /// 将价格转换为Y坐标
  static Future<double> priceToY(
          {required double price,
          required double topPrice,
          required double priceDensity}) =>
      RustLib.instance.api.crateApiModelsPriceCalculatorPriceToY(
          price: price, topPrice: topPrice, priceDensity: priceDensity);

  /// 将坐标转为为价格
  static Future<double> yToPrice(
          {required double y,
          required double topPrice,
          required double priceDensity}) =>
      RustLib.instance.api.crateApiModelsPriceCalculatorYToPrice(
          y: y, topPrice: topPrice, priceDensity: priceDensity);

  @override
  int get hashCode =>
      viewportHeight.hashCode ^
      viewportWidth.hashCode ^
      offsetX.hashCode ^
      scaleX.hashCode ^
      candleWidth.hashCode ^
      candleSpacing.hashCode ^
      candlesticks.hashCode ^
      topSafeAreaHeight.hashCode ^
      bottomSafeAreaHeight.hashCode ^
      bottomTimeLabelHeight.hashCode ^
      gridTimeCount.hashCode ^
      scaleY.hashCode ^
      crosshairOffset.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PriceCalculator &&
          runtimeType == other.runtimeType &&
          viewportHeight == other.viewportHeight &&
          viewportWidth == other.viewportWidth &&
          offsetX == other.offsetX &&
          scaleX == other.scaleX &&
          candleWidth == other.candleWidth &&
          candleSpacing == other.candleSpacing &&
          candlesticks == other.candlesticks &&
          topSafeAreaHeight == other.topSafeAreaHeight &&
          bottomSafeAreaHeight == other.bottomSafeAreaHeight &&
          bottomTimeLabelHeight == other.bottomTimeLabelHeight &&
          gridTimeCount == other.gridTimeCount &&
          scaleY == other.scaleY &&
          crosshairOffset == other.crosshairOffset;
}
